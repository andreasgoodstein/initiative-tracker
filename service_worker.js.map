{"version":3,"sources":["config.ts","service_worker.ts"],"names":[],"mappings":"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","file":"service_worker.js","sourceRoot":"../src","sourcesContent":["/* istanbul ignore file */\n\nexport const CAN_UPDATE_KEY = 'CAN_UPDATE';\n","/* istanbul ignore file */\n\nimport { CAN_UPDATE_KEY } from './config';\n\nexport default null;\ndeclare const self: ServiceWorkerGlobalScope;\n\nconst CACHE_NAME = 'the-initiative-tracker-v1';\nconst URLS_TO_CACHE = [self.location.origin];\n\nself.addEventListener('install', (event) => {\n  // Perform install steps\n  event.waitUntil(asyncPopulateCacheOnInstall);\n});\n\nself.addEventListener('fetch', (event) => {\n  if (event.request.mode === 'navigate') {\n    event.respondWith(asyncReturnThenUpdateCacheResource(event));\n  }\n});\n\nasync function asyncPopulateCacheOnInstall() {\n  const cache = await caches.open(CACHE_NAME);\n\n  cache.addAll(URLS_TO_CACHE);\n}\n\nasync function asyncReturnThenUpdateCacheResource(event: FetchEvent) {\n  const urlString = getNormalizedUrlString(event.request.url);\n\n  const fetchResponsePromise = fetch(urlString);\n  const responsePromiseClone = fetchResponsePromise.then((r) => r.clone());\n\n  event.waitUntil(\n    asyncUpdateCacheWithLatestResponse(\n      urlString,\n      responsePromiseClone,\n      event.resultingClientId || event.clientId\n    )\n  );\n\n  // Prefer the cached response, falling back to the fetch response.\n  return (await caches.match(urlString)) || fetchResponsePromise;\n}\n\nfunction getNormalizedUrlString(requestUrl: string) {\n  const normalizedUrl = new URL(requestUrl);\n  normalizedUrl.search = '';\n\n  return normalizedUrl.toString();\n}\n\nasync function asyncUpdateCacheWithLatestResponse(\n  urlString: string,\n  responsePromise: Promise<Response>,\n  clientId: string\n) {\n  const response = await responsePromise;\n  const responseToCompare = response.clone();\n\n  if (await cachedResponseIsCurrent(urlString, responseToCompare)) {\n    return;\n  }\n\n  await updateCachedResponse(urlString, response);\n\n  await sendUpdateMessageToClient(clientId);\n}\n\nasync function cachedResponseIsCurrent(\n  urlString: string,\n  response: Response\n): Promise<Boolean> {\n  const storedResponse = await caches.match(urlString);\n\n  if (!storedResponse) {\n    return false;\n  }\n\n  const [storedText, responseText] = await Promise.all([\n    storedResponse.text(),\n    response.text(),\n  ]);\n\n  return storedText === responseText;\n}\n\nasync function updateCachedResponse(urlString: string, response: Response) {\n  const cache = await caches.open(CACHE_NAME);\n  await cache.put(urlString, response);\n}\n\nasync function sendUpdateMessageToClient(clientId: string) {\n  const client = (await self.clients.get(clientId)) as WindowClient;\n\n  if (client) {\n    client.postMessage(CAN_UPDATE_KEY);\n  }\n}\n"]}